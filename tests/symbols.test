if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

::tcltest::loadTestedCommands
package require tinycc

test symbols-1.1 {List the symbols in a cdef} -body { #<<<
	lsort [lmap sym [tinycc::symbols {
		include_path local/lib/tcc/include
		include_path /home/cyan/local8.7_valgrind/include
		library_path local/lib/tcc
		library_path /home/cyan/local8.7_valgrind/lib

		code { //@begin=c@
			#include <tcl.h>

			int hello(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[])
			{
				int			code = TCL_OK;

				if (objc != 3) {
					Tcl_WrongNumArgs(interp, 1, objv, "a b");
					code = TCL_ERROR;
					goto finally;
				}

				Tcl_SetObjResult(interp, Tcl_ObjPrintf("hello, %s and %s",
					Tcl_GetString(objv[1]),
					Tcl_GetString(objv[2])));

			finally:
				return code;
			}

			int init(Tcl_Interp* interp)
			{
				return TCL_OK;
			}

			void release(Tcl_Interp* interp)
			{
			}
			//@end=c@
		}
	}] {
		if {$sym ni {hello init release}} continue
		set sym
	}]
} -result {hello init release}
#>>>


# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
