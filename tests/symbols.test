if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
}

::tcltest::loadTestedCommands
package require jitc

set stdcdef	{
	code { //@begin=c@
		int init(Tcl_Interp* interp)
		{
			return TCL_OK;
		}

		int sym(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[])
		{
			Tcl_SetObjResult(interp, Tcl_NewWideIntObj((Tcl_WideInt)sym));
			return TCL_OK;
		}

		void release(Tcl_Interp* interp)
		{
		}
		//@end=c@
	}
}

test symbols-1.1 {List the symbols in a cdef} -body { #<<<
	lsort [lmap sym [jitc::symbols {
		code { //@begin=c@
			int hello(ClientData cdata, Tcl_Interp* interp, int objc, Tcl_Obj *const objv[])
			{
				int			code = TCL_OK;

				if (objc != 3) {
					Tcl_WrongNumArgs(interp, 1, objv, "a b");
					code = TCL_ERROR;
					goto finally;
				}

				Tcl_SetObjResult(interp, Tcl_ObjPrintf("hello, %s and %s",
					Tcl_GetString(objv[1]),
					Tcl_GetString(objv[2])));

			finally:
				return code;
			}

			int init(Tcl_Interp* interp)
			{
				//fprintf(stderr, "symbols init\n");
				return TCL_OK;
			}

			void release(Tcl_Interp* interp)
			{
				//fprintf(stderr, "symbols release\n");
			}
			//@end=c@
		}
	}] {
		if {$sym ni {hello init release}} continue
		set sym
	}]
} -cleanup {
	unset -nocomplain sym
} -result {hello init release}
#>>>

unset -nocomplain stdcdef

# cleanup
::tcltest::cleanupTests
return

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
