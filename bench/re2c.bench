if {"bench" ni [info commands bench]} {
	package require bench
	namespace import bench::*
}

package require jitc

proc main {} {
	bench re2c-1.1 {invoke latency} -batch auto -setup { #<<<
		set in { //@begin=c@
			#include <assert.h>

			bool lex(const char* s)
			{
				const char*	YYCURSOR = s;
				/*!re2c
					re2c:yyfill:enable = 0;
					re2c:define:YYCTYPE = char;

					number = [1-9][0-9]*;

					number { return true; }
					*      { return false; }
				*/
			}

			int main()
			{
				assert(lex("1234"));
				return 0;
			}
			//@end=c@
		}
	} -compare {
		nolines {
			string match {/\* Generated by re2c*} [exec echo $in | $::jitc::re2cpath - --no-debug-info --case-ranges]
		}
		lines {
			string match {/\* Generated by re2c*} [exec echo $in | $::jitc::re2cpath - --case-ranges]
		}
	} -cleanup {
		unset -nocomplain in
	} -result 1
	#>>>
	bench re2c-2.1 {Check a decimal number} -batch auto -setup { #<<<
		set cdef_cached {
			filter  {jitc::re2c --no-debug-info --case-ranges}
			code    { //@begin=c@
				static Tcl_Obj* g_true  = NULL;
				static Tcl_Obj* g_false = NULL;

				INIT {
					replace_tclobj(&g_true,  Tcl_NewBooleanObj(1));
					replace_tclobj(&g_false, Tcl_NewBooleanObj(0));
					return TCL_OK;
				}

				RELEASE {
					replace_tclobj(&g_true,  NULL);
					replace_tclobj(&g_false, NULL);
				}

				OBJCMD(isdecimal) {
					CHECK_ARGS(1, "str");
					int         len;
					const char* str = Tcl_GetStringFromObj(objv[1], &len);
					const char* YYCURSOR = str;
					const char* YYLIMIT  = str+len;
					const char* YYMARKER;
					/*!re2c
						re2c:yyfill:enable = 0;
						re2c:define:YYCTYPE = "char";
						re2c:eof = 0;

						number = [1-9][0-9]*;

						number  {
							Tcl_SetObjResult(interp,
								YYCURSOR==YYLIMIT ? g_true : g_false
							);
							goto done;
						}
						$       { Tcl_SetObjResult(interp, g_false); goto done; }
						*       { Tcl_SetObjResult(interp, g_false); goto done; }
					*/
				done:
					return TCL_OK;
				}
				//@end=c@
			}
		}
		set cdef_notcached {
            filter  {jitc::re2c --no-debug-info --case-ranges}
            code    { //@begin=c@
				OBJCMD(isdecimal) {
					CHECK_ARGS(1, "str");
					int         len;
					const char* str = Tcl_GetStringFromObj(objv[1], &len);
					const char* YYCURSOR = str;
					const char* YYLIMIT  = str+len;
					const char* YYMARKER;
					/*!re2c
						re2c:yyfill:enable = 0;
						re2c:define:YYCTYPE = "char";
						re2c:eof = 0;

						number = [1-9][0-9]*;

						number  {
							Tcl_SetObjResult(interp, Tcl_NewBooleanObj(YYCURSOR==YYLIMIT));
							goto done;
						}
						$       { Tcl_SetObjResult(interp, Tcl_NewBooleanObj(0)); goto done; }
						*       { Tcl_SetObjResult(interp, Tcl_NewBooleanObj(0)); goto done; }
					*/
				done:
					return TCL_OK;
				}
				//@end=c@
            }
		}
	} -compare {
		true_cached			{expr { [jitc::capply $cdef_cached    isdecimal 12345]}}
		true_notcached		{expr { [jitc::capply $cdef_notcached isdecimal 12345]}}
		trailingx_cached	{expr {![jitc::capply $cdef_cached    isdecimal 12345x]}}
		trailingx_notcached	{expr {![jitc::capply $cdef_notcached isdecimal 12345x]}}
		leading0_cached		{expr {![jitc::capply $cdef_cached    isdecimal 012345]}}
		leading0_notcached	{expr {![jitc::capply $cdef_notcached isdecimal 012345]}}
		blank_cached		{expr {![jitc::capply $cdef_cached    isdecimal {}]}}
		blank_notcached		{expr {![jitc::capply $cdef_notcached isdecimal {}]}}
	} -cleanup {
		unset -nocomplain cdef_cached cdef_notcached
	} -result 1
	#>>>
}

main

# vim: ft=tcl foldmethod=marker foldmarker=<<<,>>> ts=4 shiftwidth=4
